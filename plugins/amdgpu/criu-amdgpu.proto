syntax = "proto2";

message dev_iolink {
	required uint32 type = 1;
	required uint32 node_to_id = 2;
}

message devinfo_entry {
	required uint32 node_id = 1;
	required uint32 gpu_id = 2;
	required uint32 cpu_cores_count = 3;
	required uint32 simd_count = 4;
	required uint32 mem_banks_count = 5;
	required uint32 caches_count = 6;
	required uint32 io_links_count = 7;
	required uint32 max_waves_per_simd = 8;
	required uint32 lds_size_in_kb = 9;
	required uint32 gds_size_in_kb = 10;
	required uint32 num_gws = 11;
	required uint32 wave_front_size = 12;
	required uint32 array_count = 13;
	required uint32 simd_arrays_per_engine = 14;
	required uint32 cu_per_simd_array = 15;
	required uint32 simd_per_cu = 16;
	required uint32 max_slots_scratch_cu = 17;
	required uint32 vendor_id = 18;
	required uint32 device_id = 19;
	required uint32 domain = 20;
	required uint32 drm_render_minor = 21;
	required uint64 hive_id = 22;
	required uint32 num_sdma_engines = 23;
	required uint32 num_sdma_xgmi_engines = 24;
	required uint32 num_sdma_queues_per_engine = 25;
	required uint32 num_cp_queues = 26;
	required uint32 fw_version = 27;
	required uint32 capability = 28;
	required uint32 sdma_fw_version = 29;
	required uint32 vram_public = 30;
	required uint64 vram_size = 31;
	repeated dev_iolink iolinks = 32;
}

message bo_entries_test {
	required uint64	bo_addr = 1;
	required uint64	bo_size = 2;
	required uint64	bo_offset = 3;
	required uint32 bo_alloc_flags = 4;
	required uint32 gpu_id = 5;
	required uint32 idr_handle = 6;
	required uint64 user_addr = 7;
	required bytes bo_rawdata = 8;
}

message q_entry {
	required uint32 gpu_id = 1;
	required uint32 type = 2;
	required uint32 format = 3;
	required uint32 q_id = 4;
	required uint64 q_address = 5;
	required uint64 q_size = 6;
	required uint32 priority = 7;
	required uint32 q_percent = 8;
	required uint64 read_ptr_addr = 9;
	required uint64 write_ptr_addr = 10;
	required uint32 doorbell_id = 11;
	required uint64 doorbell_off = 12;
	required uint32 is_gws = 13;
	required uint32 sdma_id = 14;
	required uint32 sdma_vm_addr = 15;

	required uint64 eop_ring_buffer_address = 16;
	required uint32 eop_ring_buffer_size = 17;
	required uint64 ctx_save_restore_area_address = 18;
	required uint32 ctx_save_restore_area_size = 19;
	required uint32 ctl_stack_size = 20;
	required bytes cu_mask = 21;
	required bytes mqd = 22;
	required bytes ctl_stack = 23;
}

message ev_entry {
	required uint32 event_id = 1;
	required uint32 auto_reset = 2;
	required uint32 type = 3;
	required uint32 signaled = 4;
	required uint64 user_signal_address = 5;
	required uint32 mem_exc_fail_not_present = 6;
	required uint32 mem_exc_fail_read_only = 7;
	required uint32 mem_exc_fail_no_execute = 8;
	required uint64 mem_exc_va = 9;
	required uint32 mem_exc_gpu_id = 10;
	required uint32 hw_exc_reset_type = 11;
	required uint32 hw_exc_reset_cause = 12;
	required uint32 hw_exc_memory_lost = 13;
	required uint32 hw_exc_gpu_id = 14;
}

message criu_kfd {
	required uint32 pid = 1;
	required uint32 num_of_gpus = 2;
	required uint32 num_of_cpus = 3;
	repeated devinfo_entry devinfo_entries = 4;
	required uint64	num_of_bos = 5;
	repeated bo_entries_test bo_info_test = 6;
	required uint32	num_of_queues = 7;
	repeated q_entry q_entries = 8;
	required uint64 event_page_offset = 9;
	required uint32 num_of_events = 10;
	repeated ev_entry ev_entries = 11;
	required uint64 shared_mem_size = 12;
	required uint32 shared_mem_magic = 13;
}

message criu_render_node {
	required uint32 gpu_id = 1;
}
